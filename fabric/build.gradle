import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
    maven {
        url 'https://maven.fabricmc.net/'
    }
    maven {
        url 'https://libraries.minecraft.net/'
    }
    maven {
        url 'https://maven.enginehub.org/repo/'
    }
    mavenLocal()
}

configurations {
    shade
    compile.extendsFrom(shade)
}

dependencies {

    minecraft("com.mojang:minecraft:${project.ext.minecraftVersion}")
    mappings(minecraft.officialMojangMappings())

    modImplementation("net.fabricmc:fabric-loader:0.11.3")
    modImplementation("me.m1dnightninja.midnightcore:fabric:1.0-latest")
    modImplementation("com.sk89q.worldedit:worldedit-core:7.3.0-SNAPSHOT") {
        transitive = false
    }
    /*modImplementation("com.sk89q.worldedit:worldedit-fabric-mc1.16.4:7.3.0-SNAPSHOT") {
        transitive = false
    }*/

    shade(project(':api'))
    shade(project(':common'))

}

processResources {
    inputs.property("version", project.ext.fullVersion)

    Map<String, ?> ex = new HashMap<>()
    ex.put("version", project.ext.fullVersion)
    ex.put("modid", project.ext.modid)
    ex.put("modname", project.ext.modname)
    ex.put("modclass", project.ext.modclass)

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand(ex)
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

shadowJar {

    setArchivesBaseName("${project.ext.archiveName}-fabric-dev")
    configurations = [ project.getConfigurations().shade ]

    dependencies {

        exclude('net.fabricmc:.*')
        include(project(':api'))
        include(project(':common'))

        exclude('/mapping/*')

    }

}

task remapShadowJar(type: RemapJarTask) {

    setArchivesBaseName("${project.ext.archiveName}-fabric-mc${project.ext.minecraftVersion}")

    dependsOn(tasks.shadowJar)
    input = tasks.shadowJar.getArchivePath()
    addNestedDependencies = true

}

tasks.assemble.dependsOn tasks.remapShadowJar

artifacts {
    archives tasks.remapShadowJar
    shadow tasks.sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        mavenLocal()
    }
}